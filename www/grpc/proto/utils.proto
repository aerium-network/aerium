syntax = "proto3";
package aerium;

option go_package = "github.com/aerium-network/aerium/www/grpc/aerium";
option java_package = "aerium";

// The Utils service defines RPC methods for utility functions such as message signing, verification, and more.
service Utils {
  // Signs a message with the provided private key.
  rpc SignMessageWithPrivateKey(SignMessageWithPrivateKeyRequest) returns (SignMessageWithPrivateKeyResponse);

  // Verifies a signature against the public key and message.
  rpc VerifyMessage(VerifyMessageRequest) returns (VerifyMessageResponse);

  // Aggregates multiple BLS public keys into a single key.
  rpc PublicKeyAggregation(PublicKeyAggregationRequest) returns (PublicKeyAggregationResponse);

  // Aggregates multiple BLS signatures into a single signature.
  rpc SignatureAggregation(SignatureAggregationRequest) returns (SignatureAggregationResponse);
}

// Request message for signing a message with a private key.
message SignMessageWithPrivateKeyRequest {
  // The private key to sign the message.
  string private_key = 1;
  // The message content to be signed.
  string message = 2;
}

// Response message containing the signature generated from the message.
message SignMessageWithPrivateKeyResponse {
  // The resulting signature in hexadecimal format.
  string signature = 1;
}

// Request message for verifying a message signature.
message VerifyMessageRequest {
  // The original message content that was signed.
  string message = 1;
  // The signature to verify in hexadecimal format.
  string signature = 2;
  // The public key of the signer.
  string public_key = 3;
}

// Response message containing the verification result.
message VerifyMessageResponse {
  // Indicates whether the signature is valid for the given message and public key.
  bool is_valid = 1;
}

// Request message for aggregating multiple BLS public keys.
message PublicKeyAggregationRequest {
  // List of BLS public keys to be aggregated.
  repeated string public_keys = 1;
}

// Response message containing the aggregated BLS public key result.
message PublicKeyAggregationResponse {
  // The aggregated BLS public key.
  string public_key = 1;
  // The blockchain address derived from the aggregated public key.
  string address = 2;
}

// Request message for aggregating multiple BLS signatures.
message SignatureAggregationRequest {
  // List of BLS signatures to be aggregated.
  repeated string signatures = 1;
}

// Response message containing the aggregated BLS signature.
message SignatureAggregationResponse {
  // The aggregated BLS signature in hexadecimal format.
  string signature = 1;
}

/**
 * @fileoverview gRPC-Web generated client stub for aerium
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.5.0
// 	protoc              v0.0.0
// source: utils.proto


/* eslint-disable */
// @ts-nocheck



const grpc = {};
grpc.web = require('grpc-web');

const proto = {};
proto.aerium = require('./utils_pb.js');

/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.aerium.UtilsClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'binary';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.aerium.UtilsPromiseClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'binary';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.aerium.SignMessageWithPrivateKeyRequest,
 *   !proto.aerium.SignMessageWithPrivateKeyResponse>}
 */
const methodDescriptor_Utils_SignMessageWithPrivateKey = new grpc.web.MethodDescriptor(
  '/aerium.Utils/SignMessageWithPrivateKey',
  grpc.web.MethodType.UNARY,
  proto.aerium.SignMessageWithPrivateKeyRequest,
  proto.aerium.SignMessageWithPrivateKeyResponse,
  /**
   * @param {!proto.aerium.SignMessageWithPrivateKeyRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.aerium.SignMessageWithPrivateKeyResponse.deserializeBinary
);


/**
 * @param {!proto.aerium.SignMessageWithPrivateKeyRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.aerium.SignMessageWithPrivateKeyResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.aerium.SignMessageWithPrivateKeyResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.aerium.UtilsClient.prototype.signMessageWithPrivateKey =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/aerium.Utils/SignMessageWithPrivateKey',
      request,
      metadata || {},
      methodDescriptor_Utils_SignMessageWithPrivateKey,
      callback);
};


/**
 * @param {!proto.aerium.SignMessageWithPrivateKeyRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.aerium.SignMessageWithPrivateKeyResponse>}
 *     Promise that resolves to the response
 */
proto.aerium.UtilsPromiseClient.prototype.signMessageWithPrivateKey =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/aerium.Utils/SignMessageWithPrivateKey',
      request,
      metadata || {},
      methodDescriptor_Utils_SignMessageWithPrivateKey);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.aerium.VerifyMessageRequest,
 *   !proto.aerium.VerifyMessageResponse>}
 */
const methodDescriptor_Utils_VerifyMessage = new grpc.web.MethodDescriptor(
  '/aerium.Utils/VerifyMessage',
  grpc.web.MethodType.UNARY,
  proto.aerium.VerifyMessageRequest,
  proto.aerium.VerifyMessageResponse,
  /**
   * @param {!proto.aerium.VerifyMessageRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.aerium.VerifyMessageResponse.deserializeBinary
);


/**
 * @param {!proto.aerium.VerifyMessageRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.aerium.VerifyMessageResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.aerium.VerifyMessageResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.aerium.UtilsClient.prototype.verifyMessage =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/aerium.Utils/VerifyMessage',
      request,
      metadata || {},
      methodDescriptor_Utils_VerifyMessage,
      callback);
};


/**
 * @param {!proto.aerium.VerifyMessageRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.aerium.VerifyMessageResponse>}
 *     Promise that resolves to the response
 */
proto.aerium.UtilsPromiseClient.prototype.verifyMessage =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/aerium.Utils/VerifyMessage',
      request,
      metadata || {},
      methodDescriptor_Utils_VerifyMessage);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.aerium.PublicKeyAggregationRequest,
 *   !proto.aerium.PublicKeyAggregationResponse>}
 */
const methodDescriptor_Utils_PublicKeyAggregation = new grpc.web.MethodDescriptor(
  '/aerium.Utils/PublicKeyAggregation',
  grpc.web.MethodType.UNARY,
  proto.aerium.PublicKeyAggregationRequest,
  proto.aerium.PublicKeyAggregationResponse,
  /**
   * @param {!proto.aerium.PublicKeyAggregationRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.aerium.PublicKeyAggregationResponse.deserializeBinary
);


/**
 * @param {!proto.aerium.PublicKeyAggregationRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.aerium.PublicKeyAggregationResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.aerium.PublicKeyAggregationResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.aerium.UtilsClient.prototype.publicKeyAggregation =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/aerium.Utils/PublicKeyAggregation',
      request,
      metadata || {},
      methodDescriptor_Utils_PublicKeyAggregation,
      callback);
};


/**
 * @param {!proto.aerium.PublicKeyAggregationRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.aerium.PublicKeyAggregationResponse>}
 *     Promise that resolves to the response
 */
proto.aerium.UtilsPromiseClient.prototype.publicKeyAggregation =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/aerium.Utils/PublicKeyAggregation',
      request,
      metadata || {},
      methodDescriptor_Utils_PublicKeyAggregation);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.aerium.SignatureAggregationRequest,
 *   !proto.aerium.SignatureAggregationResponse>}
 */
const methodDescriptor_Utils_SignatureAggregation = new grpc.web.MethodDescriptor(
  '/aerium.Utils/SignatureAggregation',
  grpc.web.MethodType.UNARY,
  proto.aerium.SignatureAggregationRequest,
  proto.aerium.SignatureAggregationResponse,
  /**
   * @param {!proto.aerium.SignatureAggregationRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.aerium.SignatureAggregationResponse.deserializeBinary
);


/**
 * @param {!proto.aerium.SignatureAggregationRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.aerium.SignatureAggregationResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.aerium.SignatureAggregationResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.aerium.UtilsClient.prototype.signatureAggregation =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/aerium.Utils/SignatureAggregation',
      request,
      metadata || {},
      methodDescriptor_Utils_SignatureAggregation,
      callback);
};


/**
 * @param {!proto.aerium.SignatureAggregationRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.aerium.SignatureAggregationResponse>}
 *     Promise that resolves to the response
 */
proto.aerium.UtilsPromiseClient.prototype.signatureAggregation =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/aerium.Utils/SignatureAggregation',
      request,
      metadata || {},
      methodDescriptor_Utils_SignatureAggregation);
};


module.exports = proto.aerium;


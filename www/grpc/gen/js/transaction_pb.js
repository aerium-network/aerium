// source: transaction.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global =
    (typeof globalThis !== 'undefined' && globalThis) ||
    (typeof window !== 'undefined' && window) ||
    (typeof global !== 'undefined' && global) ||
    (typeof self !== 'undefined' && self) ||
    (function () { return this; }).call(null) ||
    Function('return this')();

goog.exportSymbol('proto.aerium.BroadcastTransactionRequest', null, global);
goog.exportSymbol('proto.aerium.BroadcastTransactionResponse', null, global);
goog.exportSymbol('proto.aerium.CalculateFeeRequest', null, global);
goog.exportSymbol('proto.aerium.CalculateFeeResponse', null, global);
goog.exportSymbol('proto.aerium.DecodeRawTransactionRequest', null, global);
goog.exportSymbol('proto.aerium.DecodeRawTransactionResponse', null, global);
goog.exportSymbol('proto.aerium.GetRawBatchTransferTransactionRequest', null, global);
goog.exportSymbol('proto.aerium.GetRawBondTransactionRequest', null, global);
goog.exportSymbol('proto.aerium.GetRawTransactionResponse', null, global);
goog.exportSymbol('proto.aerium.GetRawTransferTransactionRequest', null, global);
goog.exportSymbol('proto.aerium.GetRawUnbondTransactionRequest', null, global);
goog.exportSymbol('proto.aerium.GetRawWithdrawTransactionRequest', null, global);
goog.exportSymbol('proto.aerium.GetTransactionRequest', null, global);
goog.exportSymbol('proto.aerium.GetTransactionResponse', null, global);
goog.exportSymbol('proto.aerium.PayloadBatchTransfer', null, global);
goog.exportSymbol('proto.aerium.PayloadBond', null, global);
goog.exportSymbol('proto.aerium.PayloadSortition', null, global);
goog.exportSymbol('proto.aerium.PayloadTransfer', null, global);
goog.exportSymbol('proto.aerium.PayloadType', null, global);
goog.exportSymbol('proto.aerium.PayloadUnbond', null, global);
goog.exportSymbol('proto.aerium.PayloadWithdraw', null, global);
goog.exportSymbol('proto.aerium.Recipient', null, global);
goog.exportSymbol('proto.aerium.TransactionInfo', null, global);
goog.exportSymbol('proto.aerium.TransactionInfo.PayloadCase', null, global);
goog.exportSymbol('proto.aerium.TransactionVerbosity', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.aerium.GetTransactionRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.aerium.GetTransactionRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.aerium.GetTransactionRequest.displayName = 'proto.aerium.GetTransactionRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.aerium.GetTransactionResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.aerium.GetTransactionResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.aerium.GetTransactionResponse.displayName = 'proto.aerium.GetTransactionResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.aerium.CalculateFeeRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.aerium.CalculateFeeRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.aerium.CalculateFeeRequest.displayName = 'proto.aerium.CalculateFeeRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.aerium.CalculateFeeResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.aerium.CalculateFeeResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.aerium.CalculateFeeResponse.displayName = 'proto.aerium.CalculateFeeResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.aerium.BroadcastTransactionRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.aerium.BroadcastTransactionRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.aerium.BroadcastTransactionRequest.displayName = 'proto.aerium.BroadcastTransactionRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.aerium.BroadcastTransactionResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.aerium.BroadcastTransactionResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.aerium.BroadcastTransactionResponse.displayName = 'proto.aerium.BroadcastTransactionResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.aerium.GetRawTransferTransactionRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.aerium.GetRawTransferTransactionRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.aerium.GetRawTransferTransactionRequest.displayName = 'proto.aerium.GetRawTransferTransactionRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.aerium.GetRawBondTransactionRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.aerium.GetRawBondTransactionRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.aerium.GetRawBondTransactionRequest.displayName = 'proto.aerium.GetRawBondTransactionRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.aerium.GetRawUnbondTransactionRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.aerium.GetRawUnbondTransactionRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.aerium.GetRawUnbondTransactionRequest.displayName = 'proto.aerium.GetRawUnbondTransactionRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.aerium.GetRawWithdrawTransactionRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.aerium.GetRawWithdrawTransactionRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.aerium.GetRawWithdrawTransactionRequest.displayName = 'proto.aerium.GetRawWithdrawTransactionRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.aerium.GetRawBatchTransferTransactionRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.aerium.GetRawBatchTransferTransactionRequest.repeatedFields_, null);
};
goog.inherits(proto.aerium.GetRawBatchTransferTransactionRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.aerium.GetRawBatchTransferTransactionRequest.displayName = 'proto.aerium.GetRawBatchTransferTransactionRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.aerium.GetRawTransactionResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.aerium.GetRawTransactionResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.aerium.GetRawTransactionResponse.displayName = 'proto.aerium.GetRawTransactionResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.aerium.PayloadTransfer = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.aerium.PayloadTransfer, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.aerium.PayloadTransfer.displayName = 'proto.aerium.PayloadTransfer';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.aerium.PayloadBond = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.aerium.PayloadBond, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.aerium.PayloadBond.displayName = 'proto.aerium.PayloadBond';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.aerium.PayloadSortition = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.aerium.PayloadSortition, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.aerium.PayloadSortition.displayName = 'proto.aerium.PayloadSortition';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.aerium.PayloadUnbond = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.aerium.PayloadUnbond, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.aerium.PayloadUnbond.displayName = 'proto.aerium.PayloadUnbond';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.aerium.PayloadWithdraw = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.aerium.PayloadWithdraw, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.aerium.PayloadWithdraw.displayName = 'proto.aerium.PayloadWithdraw';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.aerium.PayloadBatchTransfer = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.aerium.PayloadBatchTransfer.repeatedFields_, null);
};
goog.inherits(proto.aerium.PayloadBatchTransfer, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.aerium.PayloadBatchTransfer.displayName = 'proto.aerium.PayloadBatchTransfer';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.aerium.Recipient = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.aerium.Recipient, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.aerium.Recipient.displayName = 'proto.aerium.Recipient';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.aerium.TransactionInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.aerium.TransactionInfo.oneofGroups_);
};
goog.inherits(proto.aerium.TransactionInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.aerium.TransactionInfo.displayName = 'proto.aerium.TransactionInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.aerium.DecodeRawTransactionRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.aerium.DecodeRawTransactionRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.aerium.DecodeRawTransactionRequest.displayName = 'proto.aerium.DecodeRawTransactionRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.aerium.DecodeRawTransactionResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.aerium.DecodeRawTransactionResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.aerium.DecodeRawTransactionResponse.displayName = 'proto.aerium.DecodeRawTransactionResponse';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.aerium.GetTransactionRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.aerium.GetTransactionRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.aerium.GetTransactionRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.aerium.GetTransactionRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
id: jspb.Message.getFieldWithDefault(msg, 1, ""),
verbosity: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.aerium.GetTransactionRequest}
 */
proto.aerium.GetTransactionRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.aerium.GetTransactionRequest;
  return proto.aerium.GetTransactionRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.aerium.GetTransactionRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.aerium.GetTransactionRequest}
 */
proto.aerium.GetTransactionRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {!proto.aerium.TransactionVerbosity} */ (reader.readEnum());
      msg.setVerbosity(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.aerium.GetTransactionRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.aerium.GetTransactionRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.aerium.GetTransactionRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.aerium.GetTransactionRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getVerbosity();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.aerium.GetTransactionRequest.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.aerium.GetTransactionRequest} returns this
 */
proto.aerium.GetTransactionRequest.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional TransactionVerbosity verbosity = 2;
 * @return {!proto.aerium.TransactionVerbosity}
 */
proto.aerium.GetTransactionRequest.prototype.getVerbosity = function() {
  return /** @type {!proto.aerium.TransactionVerbosity} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.aerium.TransactionVerbosity} value
 * @return {!proto.aerium.GetTransactionRequest} returns this
 */
proto.aerium.GetTransactionRequest.prototype.setVerbosity = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.aerium.GetTransactionResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.aerium.GetTransactionResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.aerium.GetTransactionResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.aerium.GetTransactionResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
blockHeight: jspb.Message.getFieldWithDefault(msg, 1, 0),
blockTime: jspb.Message.getFieldWithDefault(msg, 2, 0),
transaction: (f = msg.getTransaction()) && proto.aerium.TransactionInfo.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.aerium.GetTransactionResponse}
 */
proto.aerium.GetTransactionResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.aerium.GetTransactionResponse;
  return proto.aerium.GetTransactionResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.aerium.GetTransactionResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.aerium.GetTransactionResponse}
 */
proto.aerium.GetTransactionResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setBlockHeight(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setBlockTime(value);
      break;
    case 3:
      var value = new proto.aerium.TransactionInfo;
      reader.readMessage(value,proto.aerium.TransactionInfo.deserializeBinaryFromReader);
      msg.setTransaction(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.aerium.GetTransactionResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.aerium.GetTransactionResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.aerium.GetTransactionResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.aerium.GetTransactionResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBlockHeight();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getBlockTime();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getTransaction();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.aerium.TransactionInfo.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint32 block_height = 1;
 * @return {number}
 */
proto.aerium.GetTransactionResponse.prototype.getBlockHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.aerium.GetTransactionResponse} returns this
 */
proto.aerium.GetTransactionResponse.prototype.setBlockHeight = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 block_time = 2;
 * @return {number}
 */
proto.aerium.GetTransactionResponse.prototype.getBlockTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.aerium.GetTransactionResponse} returns this
 */
proto.aerium.GetTransactionResponse.prototype.setBlockTime = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional TransactionInfo transaction = 3;
 * @return {?proto.aerium.TransactionInfo}
 */
proto.aerium.GetTransactionResponse.prototype.getTransaction = function() {
  return /** @type{?proto.aerium.TransactionInfo} */ (
    jspb.Message.getWrapperField(this, proto.aerium.TransactionInfo, 3));
};


/**
 * @param {?proto.aerium.TransactionInfo|undefined} value
 * @return {!proto.aerium.GetTransactionResponse} returns this
*/
proto.aerium.GetTransactionResponse.prototype.setTransaction = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.aerium.GetTransactionResponse} returns this
 */
proto.aerium.GetTransactionResponse.prototype.clearTransaction = function() {
  return this.setTransaction(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.aerium.GetTransactionResponse.prototype.hasTransaction = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.aerium.CalculateFeeRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.aerium.CalculateFeeRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.aerium.CalculateFeeRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.aerium.CalculateFeeRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
amount: jspb.Message.getFieldWithDefault(msg, 1, 0),
payloadType: jspb.Message.getFieldWithDefault(msg, 2, 0),
fixedAmount: jspb.Message.getBooleanFieldWithDefault(msg, 3, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.aerium.CalculateFeeRequest}
 */
proto.aerium.CalculateFeeRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.aerium.CalculateFeeRequest;
  return proto.aerium.CalculateFeeRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.aerium.CalculateFeeRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.aerium.CalculateFeeRequest}
 */
proto.aerium.CalculateFeeRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setAmount(value);
      break;
    case 2:
      var value = /** @type {!proto.aerium.PayloadType} */ (reader.readEnum());
      msg.setPayloadType(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setFixedAmount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.aerium.CalculateFeeRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.aerium.CalculateFeeRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.aerium.CalculateFeeRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.aerium.CalculateFeeRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAmount();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getPayloadType();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getFixedAmount();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
};


/**
 * optional int64 amount = 1;
 * @return {number}
 */
proto.aerium.CalculateFeeRequest.prototype.getAmount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.aerium.CalculateFeeRequest} returns this
 */
proto.aerium.CalculateFeeRequest.prototype.setAmount = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional PayloadType payload_type = 2;
 * @return {!proto.aerium.PayloadType}
 */
proto.aerium.CalculateFeeRequest.prototype.getPayloadType = function() {
  return /** @type {!proto.aerium.PayloadType} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.aerium.PayloadType} value
 * @return {!proto.aerium.CalculateFeeRequest} returns this
 */
proto.aerium.CalculateFeeRequest.prototype.setPayloadType = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional bool fixed_amount = 3;
 * @return {boolean}
 */
proto.aerium.CalculateFeeRequest.prototype.getFixedAmount = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.aerium.CalculateFeeRequest} returns this
 */
proto.aerium.CalculateFeeRequest.prototype.setFixedAmount = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.aerium.CalculateFeeResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.aerium.CalculateFeeResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.aerium.CalculateFeeResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.aerium.CalculateFeeResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
amount: jspb.Message.getFieldWithDefault(msg, 1, 0),
fee: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.aerium.CalculateFeeResponse}
 */
proto.aerium.CalculateFeeResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.aerium.CalculateFeeResponse;
  return proto.aerium.CalculateFeeResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.aerium.CalculateFeeResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.aerium.CalculateFeeResponse}
 */
proto.aerium.CalculateFeeResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setAmount(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setFee(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.aerium.CalculateFeeResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.aerium.CalculateFeeResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.aerium.CalculateFeeResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.aerium.CalculateFeeResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAmount();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getFee();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
};


/**
 * optional int64 amount = 1;
 * @return {number}
 */
proto.aerium.CalculateFeeResponse.prototype.getAmount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.aerium.CalculateFeeResponse} returns this
 */
proto.aerium.CalculateFeeResponse.prototype.setAmount = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int64 fee = 2;
 * @return {number}
 */
proto.aerium.CalculateFeeResponse.prototype.getFee = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.aerium.CalculateFeeResponse} returns this
 */
proto.aerium.CalculateFeeResponse.prototype.setFee = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.aerium.BroadcastTransactionRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.aerium.BroadcastTransactionRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.aerium.BroadcastTransactionRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.aerium.BroadcastTransactionRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
signedRawTransaction: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.aerium.BroadcastTransactionRequest}
 */
proto.aerium.BroadcastTransactionRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.aerium.BroadcastTransactionRequest;
  return proto.aerium.BroadcastTransactionRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.aerium.BroadcastTransactionRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.aerium.BroadcastTransactionRequest}
 */
proto.aerium.BroadcastTransactionRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSignedRawTransaction(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.aerium.BroadcastTransactionRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.aerium.BroadcastTransactionRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.aerium.BroadcastTransactionRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.aerium.BroadcastTransactionRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSignedRawTransaction();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string signed_raw_transaction = 1;
 * @return {string}
 */
proto.aerium.BroadcastTransactionRequest.prototype.getSignedRawTransaction = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.aerium.BroadcastTransactionRequest} returns this
 */
proto.aerium.BroadcastTransactionRequest.prototype.setSignedRawTransaction = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.aerium.BroadcastTransactionResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.aerium.BroadcastTransactionResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.aerium.BroadcastTransactionResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.aerium.BroadcastTransactionResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
id: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.aerium.BroadcastTransactionResponse}
 */
proto.aerium.BroadcastTransactionResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.aerium.BroadcastTransactionResponse;
  return proto.aerium.BroadcastTransactionResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.aerium.BroadcastTransactionResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.aerium.BroadcastTransactionResponse}
 */
proto.aerium.BroadcastTransactionResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.aerium.BroadcastTransactionResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.aerium.BroadcastTransactionResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.aerium.BroadcastTransactionResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.aerium.BroadcastTransactionResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.aerium.BroadcastTransactionResponse.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.aerium.BroadcastTransactionResponse} returns this
 */
proto.aerium.BroadcastTransactionResponse.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.aerium.GetRawTransferTransactionRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.aerium.GetRawTransferTransactionRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.aerium.GetRawTransferTransactionRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.aerium.GetRawTransferTransactionRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
lockTime: jspb.Message.getFieldWithDefault(msg, 1, 0),
sender: jspb.Message.getFieldWithDefault(msg, 2, ""),
receiver: jspb.Message.getFieldWithDefault(msg, 3, ""),
amount: jspb.Message.getFieldWithDefault(msg, 4, 0),
fee: jspb.Message.getFieldWithDefault(msg, 5, 0),
memo: jspb.Message.getFieldWithDefault(msg, 6, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.aerium.GetRawTransferTransactionRequest}
 */
proto.aerium.GetRawTransferTransactionRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.aerium.GetRawTransferTransactionRequest;
  return proto.aerium.GetRawTransferTransactionRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.aerium.GetRawTransferTransactionRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.aerium.GetRawTransferTransactionRequest}
 */
proto.aerium.GetRawTransferTransactionRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setLockTime(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSender(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setReceiver(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setAmount(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setFee(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setMemo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.aerium.GetRawTransferTransactionRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.aerium.GetRawTransferTransactionRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.aerium.GetRawTransferTransactionRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.aerium.GetRawTransferTransactionRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLockTime();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getSender();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getReceiver();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getAmount();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
  f = message.getFee();
  if (f !== 0) {
    writer.writeInt64(
      5,
      f
    );
  }
  f = message.getMemo();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
};


/**
 * optional uint32 lock_time = 1;
 * @return {number}
 */
proto.aerium.GetRawTransferTransactionRequest.prototype.getLockTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.aerium.GetRawTransferTransactionRequest} returns this
 */
proto.aerium.GetRawTransferTransactionRequest.prototype.setLockTime = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string sender = 2;
 * @return {string}
 */
proto.aerium.GetRawTransferTransactionRequest.prototype.getSender = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.aerium.GetRawTransferTransactionRequest} returns this
 */
proto.aerium.GetRawTransferTransactionRequest.prototype.setSender = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string receiver = 3;
 * @return {string}
 */
proto.aerium.GetRawTransferTransactionRequest.prototype.getReceiver = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.aerium.GetRawTransferTransactionRequest} returns this
 */
proto.aerium.GetRawTransferTransactionRequest.prototype.setReceiver = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional int64 amount = 4;
 * @return {number}
 */
proto.aerium.GetRawTransferTransactionRequest.prototype.getAmount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.aerium.GetRawTransferTransactionRequest} returns this
 */
proto.aerium.GetRawTransferTransactionRequest.prototype.setAmount = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int64 fee = 5;
 * @return {number}
 */
proto.aerium.GetRawTransferTransactionRequest.prototype.getFee = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.aerium.GetRawTransferTransactionRequest} returns this
 */
proto.aerium.GetRawTransferTransactionRequest.prototype.setFee = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional string memo = 6;
 * @return {string}
 */
proto.aerium.GetRawTransferTransactionRequest.prototype.getMemo = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.aerium.GetRawTransferTransactionRequest} returns this
 */
proto.aerium.GetRawTransferTransactionRequest.prototype.setMemo = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.aerium.GetRawBondTransactionRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.aerium.GetRawBondTransactionRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.aerium.GetRawBondTransactionRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.aerium.GetRawBondTransactionRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
lockTime: jspb.Message.getFieldWithDefault(msg, 1, 0),
sender: jspb.Message.getFieldWithDefault(msg, 2, ""),
receiver: jspb.Message.getFieldWithDefault(msg, 3, ""),
stake: jspb.Message.getFieldWithDefault(msg, 4, 0),
publicKey: jspb.Message.getFieldWithDefault(msg, 5, ""),
fee: jspb.Message.getFieldWithDefault(msg, 6, 0),
memo: jspb.Message.getFieldWithDefault(msg, 7, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.aerium.GetRawBondTransactionRequest}
 */
proto.aerium.GetRawBondTransactionRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.aerium.GetRawBondTransactionRequest;
  return proto.aerium.GetRawBondTransactionRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.aerium.GetRawBondTransactionRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.aerium.GetRawBondTransactionRequest}
 */
proto.aerium.GetRawBondTransactionRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setLockTime(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSender(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setReceiver(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setStake(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setPublicKey(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setFee(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setMemo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.aerium.GetRawBondTransactionRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.aerium.GetRawBondTransactionRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.aerium.GetRawBondTransactionRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.aerium.GetRawBondTransactionRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLockTime();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getSender();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getReceiver();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getStake();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
  f = message.getPublicKey();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getFee();
  if (f !== 0) {
    writer.writeInt64(
      6,
      f
    );
  }
  f = message.getMemo();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
};


/**
 * optional uint32 lock_time = 1;
 * @return {number}
 */
proto.aerium.GetRawBondTransactionRequest.prototype.getLockTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.aerium.GetRawBondTransactionRequest} returns this
 */
proto.aerium.GetRawBondTransactionRequest.prototype.setLockTime = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string sender = 2;
 * @return {string}
 */
proto.aerium.GetRawBondTransactionRequest.prototype.getSender = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.aerium.GetRawBondTransactionRequest} returns this
 */
proto.aerium.GetRawBondTransactionRequest.prototype.setSender = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string receiver = 3;
 * @return {string}
 */
proto.aerium.GetRawBondTransactionRequest.prototype.getReceiver = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.aerium.GetRawBondTransactionRequest} returns this
 */
proto.aerium.GetRawBondTransactionRequest.prototype.setReceiver = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional int64 stake = 4;
 * @return {number}
 */
proto.aerium.GetRawBondTransactionRequest.prototype.getStake = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.aerium.GetRawBondTransactionRequest} returns this
 */
proto.aerium.GetRawBondTransactionRequest.prototype.setStake = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional string public_key = 5;
 * @return {string}
 */
proto.aerium.GetRawBondTransactionRequest.prototype.getPublicKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.aerium.GetRawBondTransactionRequest} returns this
 */
proto.aerium.GetRawBondTransactionRequest.prototype.setPublicKey = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional int64 fee = 6;
 * @return {number}
 */
proto.aerium.GetRawBondTransactionRequest.prototype.getFee = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.aerium.GetRawBondTransactionRequest} returns this
 */
proto.aerium.GetRawBondTransactionRequest.prototype.setFee = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional string memo = 7;
 * @return {string}
 */
proto.aerium.GetRawBondTransactionRequest.prototype.getMemo = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.aerium.GetRawBondTransactionRequest} returns this
 */
proto.aerium.GetRawBondTransactionRequest.prototype.setMemo = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.aerium.GetRawUnbondTransactionRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.aerium.GetRawUnbondTransactionRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.aerium.GetRawUnbondTransactionRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.aerium.GetRawUnbondTransactionRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
lockTime: jspb.Message.getFieldWithDefault(msg, 1, 0),
validatorAddress: jspb.Message.getFieldWithDefault(msg, 3, ""),
memo: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.aerium.GetRawUnbondTransactionRequest}
 */
proto.aerium.GetRawUnbondTransactionRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.aerium.GetRawUnbondTransactionRequest;
  return proto.aerium.GetRawUnbondTransactionRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.aerium.GetRawUnbondTransactionRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.aerium.GetRawUnbondTransactionRequest}
 */
proto.aerium.GetRawUnbondTransactionRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setLockTime(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setValidatorAddress(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setMemo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.aerium.GetRawUnbondTransactionRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.aerium.GetRawUnbondTransactionRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.aerium.GetRawUnbondTransactionRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.aerium.GetRawUnbondTransactionRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLockTime();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getValidatorAddress();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getMemo();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional uint32 lock_time = 1;
 * @return {number}
 */
proto.aerium.GetRawUnbondTransactionRequest.prototype.getLockTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.aerium.GetRawUnbondTransactionRequest} returns this
 */
proto.aerium.GetRawUnbondTransactionRequest.prototype.setLockTime = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string validator_address = 3;
 * @return {string}
 */
proto.aerium.GetRawUnbondTransactionRequest.prototype.getValidatorAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.aerium.GetRawUnbondTransactionRequest} returns this
 */
proto.aerium.GetRawUnbondTransactionRequest.prototype.setValidatorAddress = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string memo = 4;
 * @return {string}
 */
proto.aerium.GetRawUnbondTransactionRequest.prototype.getMemo = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.aerium.GetRawUnbondTransactionRequest} returns this
 */
proto.aerium.GetRawUnbondTransactionRequest.prototype.setMemo = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.aerium.GetRawWithdrawTransactionRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.aerium.GetRawWithdrawTransactionRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.aerium.GetRawWithdrawTransactionRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.aerium.GetRawWithdrawTransactionRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
lockTime: jspb.Message.getFieldWithDefault(msg, 1, 0),
validatorAddress: jspb.Message.getFieldWithDefault(msg, 2, ""),
accountAddress: jspb.Message.getFieldWithDefault(msg, 3, ""),
amount: jspb.Message.getFieldWithDefault(msg, 4, 0),
fee: jspb.Message.getFieldWithDefault(msg, 5, 0),
memo: jspb.Message.getFieldWithDefault(msg, 6, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.aerium.GetRawWithdrawTransactionRequest}
 */
proto.aerium.GetRawWithdrawTransactionRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.aerium.GetRawWithdrawTransactionRequest;
  return proto.aerium.GetRawWithdrawTransactionRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.aerium.GetRawWithdrawTransactionRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.aerium.GetRawWithdrawTransactionRequest}
 */
proto.aerium.GetRawWithdrawTransactionRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setLockTime(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setValidatorAddress(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setAccountAddress(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setAmount(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setFee(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setMemo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.aerium.GetRawWithdrawTransactionRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.aerium.GetRawWithdrawTransactionRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.aerium.GetRawWithdrawTransactionRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.aerium.GetRawWithdrawTransactionRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLockTime();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getValidatorAddress();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getAccountAddress();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getAmount();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
  f = message.getFee();
  if (f !== 0) {
    writer.writeInt64(
      5,
      f
    );
  }
  f = message.getMemo();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
};


/**
 * optional uint32 lock_time = 1;
 * @return {number}
 */
proto.aerium.GetRawWithdrawTransactionRequest.prototype.getLockTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.aerium.GetRawWithdrawTransactionRequest} returns this
 */
proto.aerium.GetRawWithdrawTransactionRequest.prototype.setLockTime = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string validator_address = 2;
 * @return {string}
 */
proto.aerium.GetRawWithdrawTransactionRequest.prototype.getValidatorAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.aerium.GetRawWithdrawTransactionRequest} returns this
 */
proto.aerium.GetRawWithdrawTransactionRequest.prototype.setValidatorAddress = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string account_address = 3;
 * @return {string}
 */
proto.aerium.GetRawWithdrawTransactionRequest.prototype.getAccountAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.aerium.GetRawWithdrawTransactionRequest} returns this
 */
proto.aerium.GetRawWithdrawTransactionRequest.prototype.setAccountAddress = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional int64 amount = 4;
 * @return {number}
 */
proto.aerium.GetRawWithdrawTransactionRequest.prototype.getAmount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.aerium.GetRawWithdrawTransactionRequest} returns this
 */
proto.aerium.GetRawWithdrawTransactionRequest.prototype.setAmount = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int64 fee = 5;
 * @return {number}
 */
proto.aerium.GetRawWithdrawTransactionRequest.prototype.getFee = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.aerium.GetRawWithdrawTransactionRequest} returns this
 */
proto.aerium.GetRawWithdrawTransactionRequest.prototype.setFee = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional string memo = 6;
 * @return {string}
 */
proto.aerium.GetRawWithdrawTransactionRequest.prototype.getMemo = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.aerium.GetRawWithdrawTransactionRequest} returns this
 */
proto.aerium.GetRawWithdrawTransactionRequest.prototype.setMemo = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.aerium.GetRawBatchTransferTransactionRequest.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.aerium.GetRawBatchTransferTransactionRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.aerium.GetRawBatchTransferTransactionRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.aerium.GetRawBatchTransferTransactionRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.aerium.GetRawBatchTransferTransactionRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
lockTime: jspb.Message.getFieldWithDefault(msg, 1, 0),
sender: jspb.Message.getFieldWithDefault(msg, 2, ""),
recipientsList: jspb.Message.toObjectList(msg.getRecipientsList(),
    proto.aerium.Recipient.toObject, includeInstance),
fee: jspb.Message.getFieldWithDefault(msg, 4, 0),
memo: jspb.Message.getFieldWithDefault(msg, 5, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.aerium.GetRawBatchTransferTransactionRequest}
 */
proto.aerium.GetRawBatchTransferTransactionRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.aerium.GetRawBatchTransferTransactionRequest;
  return proto.aerium.GetRawBatchTransferTransactionRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.aerium.GetRawBatchTransferTransactionRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.aerium.GetRawBatchTransferTransactionRequest}
 */
proto.aerium.GetRawBatchTransferTransactionRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setLockTime(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSender(value);
      break;
    case 3:
      var value = new proto.aerium.Recipient;
      reader.readMessage(value,proto.aerium.Recipient.deserializeBinaryFromReader);
      msg.addRecipients(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setFee(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setMemo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.aerium.GetRawBatchTransferTransactionRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.aerium.GetRawBatchTransferTransactionRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.aerium.GetRawBatchTransferTransactionRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.aerium.GetRawBatchTransferTransactionRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLockTime();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getSender();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getRecipientsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.aerium.Recipient.serializeBinaryToWriter
    );
  }
  f = message.getFee();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
  f = message.getMemo();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * optional uint32 lock_time = 1;
 * @return {number}
 */
proto.aerium.GetRawBatchTransferTransactionRequest.prototype.getLockTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.aerium.GetRawBatchTransferTransactionRequest} returns this
 */
proto.aerium.GetRawBatchTransferTransactionRequest.prototype.setLockTime = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string sender = 2;
 * @return {string}
 */
proto.aerium.GetRawBatchTransferTransactionRequest.prototype.getSender = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.aerium.GetRawBatchTransferTransactionRequest} returns this
 */
proto.aerium.GetRawBatchTransferTransactionRequest.prototype.setSender = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * repeated Recipient recipients = 3;
 * @return {!Array<!proto.aerium.Recipient>}
 */
proto.aerium.GetRawBatchTransferTransactionRequest.prototype.getRecipientsList = function() {
  return /** @type{!Array<!proto.aerium.Recipient>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.aerium.Recipient, 3));
};


/**
 * @param {!Array<!proto.aerium.Recipient>} value
 * @return {!proto.aerium.GetRawBatchTransferTransactionRequest} returns this
*/
proto.aerium.GetRawBatchTransferTransactionRequest.prototype.setRecipientsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.aerium.Recipient=} opt_value
 * @param {number=} opt_index
 * @return {!proto.aerium.Recipient}
 */
proto.aerium.GetRawBatchTransferTransactionRequest.prototype.addRecipients = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.aerium.Recipient, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.aerium.GetRawBatchTransferTransactionRequest} returns this
 */
proto.aerium.GetRawBatchTransferTransactionRequest.prototype.clearRecipientsList = function() {
  return this.setRecipientsList([]);
};


/**
 * optional int64 fee = 4;
 * @return {number}
 */
proto.aerium.GetRawBatchTransferTransactionRequest.prototype.getFee = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.aerium.GetRawBatchTransferTransactionRequest} returns this
 */
proto.aerium.GetRawBatchTransferTransactionRequest.prototype.setFee = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional string memo = 5;
 * @return {string}
 */
proto.aerium.GetRawBatchTransferTransactionRequest.prototype.getMemo = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.aerium.GetRawBatchTransferTransactionRequest} returns this
 */
proto.aerium.GetRawBatchTransferTransactionRequest.prototype.setMemo = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.aerium.GetRawTransactionResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.aerium.GetRawTransactionResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.aerium.GetRawTransactionResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.aerium.GetRawTransactionResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
rawTransaction: jspb.Message.getFieldWithDefault(msg, 1, ""),
id: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.aerium.GetRawTransactionResponse}
 */
proto.aerium.GetRawTransactionResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.aerium.GetRawTransactionResponse;
  return proto.aerium.GetRawTransactionResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.aerium.GetRawTransactionResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.aerium.GetRawTransactionResponse}
 */
proto.aerium.GetRawTransactionResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRawTransaction(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.aerium.GetRawTransactionResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.aerium.GetRawTransactionResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.aerium.GetRawTransactionResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.aerium.GetRawTransactionResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRawTransaction();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string raw_transaction = 1;
 * @return {string}
 */
proto.aerium.GetRawTransactionResponse.prototype.getRawTransaction = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.aerium.GetRawTransactionResponse} returns this
 */
proto.aerium.GetRawTransactionResponse.prototype.setRawTransaction = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string id = 2;
 * @return {string}
 */
proto.aerium.GetRawTransactionResponse.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.aerium.GetRawTransactionResponse} returns this
 */
proto.aerium.GetRawTransactionResponse.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.aerium.PayloadTransfer.prototype.toObject = function(opt_includeInstance) {
  return proto.aerium.PayloadTransfer.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.aerium.PayloadTransfer} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.aerium.PayloadTransfer.toObject = function(includeInstance, msg) {
  var f, obj = {
sender: jspb.Message.getFieldWithDefault(msg, 1, ""),
receiver: jspb.Message.getFieldWithDefault(msg, 2, ""),
amount: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.aerium.PayloadTransfer}
 */
proto.aerium.PayloadTransfer.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.aerium.PayloadTransfer;
  return proto.aerium.PayloadTransfer.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.aerium.PayloadTransfer} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.aerium.PayloadTransfer}
 */
proto.aerium.PayloadTransfer.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSender(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setReceiver(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setAmount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.aerium.PayloadTransfer.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.aerium.PayloadTransfer.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.aerium.PayloadTransfer} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.aerium.PayloadTransfer.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSender();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getReceiver();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getAmount();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
};


/**
 * optional string sender = 1;
 * @return {string}
 */
proto.aerium.PayloadTransfer.prototype.getSender = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.aerium.PayloadTransfer} returns this
 */
proto.aerium.PayloadTransfer.prototype.setSender = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string receiver = 2;
 * @return {string}
 */
proto.aerium.PayloadTransfer.prototype.getReceiver = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.aerium.PayloadTransfer} returns this
 */
proto.aerium.PayloadTransfer.prototype.setReceiver = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int64 amount = 3;
 * @return {number}
 */
proto.aerium.PayloadTransfer.prototype.getAmount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.aerium.PayloadTransfer} returns this
 */
proto.aerium.PayloadTransfer.prototype.setAmount = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.aerium.PayloadBond.prototype.toObject = function(opt_includeInstance) {
  return proto.aerium.PayloadBond.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.aerium.PayloadBond} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.aerium.PayloadBond.toObject = function(includeInstance, msg) {
  var f, obj = {
sender: jspb.Message.getFieldWithDefault(msg, 1, ""),
receiver: jspb.Message.getFieldWithDefault(msg, 2, ""),
stake: jspb.Message.getFieldWithDefault(msg, 3, 0),
publicKey: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.aerium.PayloadBond}
 */
proto.aerium.PayloadBond.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.aerium.PayloadBond;
  return proto.aerium.PayloadBond.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.aerium.PayloadBond} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.aerium.PayloadBond}
 */
proto.aerium.PayloadBond.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSender(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setReceiver(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setStake(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setPublicKey(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.aerium.PayloadBond.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.aerium.PayloadBond.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.aerium.PayloadBond} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.aerium.PayloadBond.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSender();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getReceiver();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getStake();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getPublicKey();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional string sender = 1;
 * @return {string}
 */
proto.aerium.PayloadBond.prototype.getSender = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.aerium.PayloadBond} returns this
 */
proto.aerium.PayloadBond.prototype.setSender = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string receiver = 2;
 * @return {string}
 */
proto.aerium.PayloadBond.prototype.getReceiver = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.aerium.PayloadBond} returns this
 */
proto.aerium.PayloadBond.prototype.setReceiver = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int64 stake = 3;
 * @return {number}
 */
proto.aerium.PayloadBond.prototype.getStake = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.aerium.PayloadBond} returns this
 */
proto.aerium.PayloadBond.prototype.setStake = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional string public_key = 4;
 * @return {string}
 */
proto.aerium.PayloadBond.prototype.getPublicKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.aerium.PayloadBond} returns this
 */
proto.aerium.PayloadBond.prototype.setPublicKey = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.aerium.PayloadSortition.prototype.toObject = function(opt_includeInstance) {
  return proto.aerium.PayloadSortition.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.aerium.PayloadSortition} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.aerium.PayloadSortition.toObject = function(includeInstance, msg) {
  var f, obj = {
address: jspb.Message.getFieldWithDefault(msg, 1, ""),
proof: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.aerium.PayloadSortition}
 */
proto.aerium.PayloadSortition.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.aerium.PayloadSortition;
  return proto.aerium.PayloadSortition.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.aerium.PayloadSortition} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.aerium.PayloadSortition}
 */
proto.aerium.PayloadSortition.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAddress(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setProof(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.aerium.PayloadSortition.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.aerium.PayloadSortition.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.aerium.PayloadSortition} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.aerium.PayloadSortition.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAddress();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getProof();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string address = 1;
 * @return {string}
 */
proto.aerium.PayloadSortition.prototype.getAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.aerium.PayloadSortition} returns this
 */
proto.aerium.PayloadSortition.prototype.setAddress = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string proof = 2;
 * @return {string}
 */
proto.aerium.PayloadSortition.prototype.getProof = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.aerium.PayloadSortition} returns this
 */
proto.aerium.PayloadSortition.prototype.setProof = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.aerium.PayloadUnbond.prototype.toObject = function(opt_includeInstance) {
  return proto.aerium.PayloadUnbond.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.aerium.PayloadUnbond} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.aerium.PayloadUnbond.toObject = function(includeInstance, msg) {
  var f, obj = {
validator: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.aerium.PayloadUnbond}
 */
proto.aerium.PayloadUnbond.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.aerium.PayloadUnbond;
  return proto.aerium.PayloadUnbond.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.aerium.PayloadUnbond} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.aerium.PayloadUnbond}
 */
proto.aerium.PayloadUnbond.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setValidator(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.aerium.PayloadUnbond.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.aerium.PayloadUnbond.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.aerium.PayloadUnbond} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.aerium.PayloadUnbond.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValidator();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string validator = 1;
 * @return {string}
 */
proto.aerium.PayloadUnbond.prototype.getValidator = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.aerium.PayloadUnbond} returns this
 */
proto.aerium.PayloadUnbond.prototype.setValidator = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.aerium.PayloadWithdraw.prototype.toObject = function(opt_includeInstance) {
  return proto.aerium.PayloadWithdraw.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.aerium.PayloadWithdraw} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.aerium.PayloadWithdraw.toObject = function(includeInstance, msg) {
  var f, obj = {
validatorAddress: jspb.Message.getFieldWithDefault(msg, 1, ""),
accountAddress: jspb.Message.getFieldWithDefault(msg, 2, ""),
amount: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.aerium.PayloadWithdraw}
 */
proto.aerium.PayloadWithdraw.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.aerium.PayloadWithdraw;
  return proto.aerium.PayloadWithdraw.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.aerium.PayloadWithdraw} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.aerium.PayloadWithdraw}
 */
proto.aerium.PayloadWithdraw.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setValidatorAddress(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAccountAddress(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setAmount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.aerium.PayloadWithdraw.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.aerium.PayloadWithdraw.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.aerium.PayloadWithdraw} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.aerium.PayloadWithdraw.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValidatorAddress();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAccountAddress();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getAmount();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
};


/**
 * optional string validator_address = 1;
 * @return {string}
 */
proto.aerium.PayloadWithdraw.prototype.getValidatorAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.aerium.PayloadWithdraw} returns this
 */
proto.aerium.PayloadWithdraw.prototype.setValidatorAddress = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string account_address = 2;
 * @return {string}
 */
proto.aerium.PayloadWithdraw.prototype.getAccountAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.aerium.PayloadWithdraw} returns this
 */
proto.aerium.PayloadWithdraw.prototype.setAccountAddress = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int64 amount = 3;
 * @return {number}
 */
proto.aerium.PayloadWithdraw.prototype.getAmount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.aerium.PayloadWithdraw} returns this
 */
proto.aerium.PayloadWithdraw.prototype.setAmount = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.aerium.PayloadBatchTransfer.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.aerium.PayloadBatchTransfer.prototype.toObject = function(opt_includeInstance) {
  return proto.aerium.PayloadBatchTransfer.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.aerium.PayloadBatchTransfer} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.aerium.PayloadBatchTransfer.toObject = function(includeInstance, msg) {
  var f, obj = {
sender: jspb.Message.getFieldWithDefault(msg, 1, ""),
recipientsList: jspb.Message.toObjectList(msg.getRecipientsList(),
    proto.aerium.Recipient.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.aerium.PayloadBatchTransfer}
 */
proto.aerium.PayloadBatchTransfer.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.aerium.PayloadBatchTransfer;
  return proto.aerium.PayloadBatchTransfer.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.aerium.PayloadBatchTransfer} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.aerium.PayloadBatchTransfer}
 */
proto.aerium.PayloadBatchTransfer.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSender(value);
      break;
    case 2:
      var value = new proto.aerium.Recipient;
      reader.readMessage(value,proto.aerium.Recipient.deserializeBinaryFromReader);
      msg.addRecipients(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.aerium.PayloadBatchTransfer.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.aerium.PayloadBatchTransfer.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.aerium.PayloadBatchTransfer} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.aerium.PayloadBatchTransfer.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSender();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getRecipientsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.aerium.Recipient.serializeBinaryToWriter
    );
  }
};


/**
 * optional string sender = 1;
 * @return {string}
 */
proto.aerium.PayloadBatchTransfer.prototype.getSender = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.aerium.PayloadBatchTransfer} returns this
 */
proto.aerium.PayloadBatchTransfer.prototype.setSender = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated Recipient recipients = 2;
 * @return {!Array<!proto.aerium.Recipient>}
 */
proto.aerium.PayloadBatchTransfer.prototype.getRecipientsList = function() {
  return /** @type{!Array<!proto.aerium.Recipient>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.aerium.Recipient, 2));
};


/**
 * @param {!Array<!proto.aerium.Recipient>} value
 * @return {!proto.aerium.PayloadBatchTransfer} returns this
*/
proto.aerium.PayloadBatchTransfer.prototype.setRecipientsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.aerium.Recipient=} opt_value
 * @param {number=} opt_index
 * @return {!proto.aerium.Recipient}
 */
proto.aerium.PayloadBatchTransfer.prototype.addRecipients = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.aerium.Recipient, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.aerium.PayloadBatchTransfer} returns this
 */
proto.aerium.PayloadBatchTransfer.prototype.clearRecipientsList = function() {
  return this.setRecipientsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.aerium.Recipient.prototype.toObject = function(opt_includeInstance) {
  return proto.aerium.Recipient.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.aerium.Recipient} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.aerium.Recipient.toObject = function(includeInstance, msg) {
  var f, obj = {
receiver: jspb.Message.getFieldWithDefault(msg, 1, ""),
amount: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.aerium.Recipient}
 */
proto.aerium.Recipient.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.aerium.Recipient;
  return proto.aerium.Recipient.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.aerium.Recipient} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.aerium.Recipient}
 */
proto.aerium.Recipient.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setReceiver(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setAmount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.aerium.Recipient.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.aerium.Recipient.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.aerium.Recipient} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.aerium.Recipient.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getReceiver();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAmount();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
};


/**
 * optional string receiver = 1;
 * @return {string}
 */
proto.aerium.Recipient.prototype.getReceiver = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.aerium.Recipient} returns this
 */
proto.aerium.Recipient.prototype.setReceiver = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int64 amount = 2;
 * @return {number}
 */
proto.aerium.Recipient.prototype.getAmount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.aerium.Recipient} returns this
 */
proto.aerium.Recipient.prototype.setAmount = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.aerium.TransactionInfo.oneofGroups_ = [[30,31,32,33,34,35]];

/**
 * @enum {number}
 */
proto.aerium.TransactionInfo.PayloadCase = {
  PAYLOAD_NOT_SET: 0,
  TRANSFER: 30,
  BOND: 31,
  SORTITION: 32,
  UNBOND: 33,
  WITHDRAW: 34,
  BATCH_TRANSFER: 35
};

/**
 * @return {proto.aerium.TransactionInfo.PayloadCase}
 */
proto.aerium.TransactionInfo.prototype.getPayloadCase = function() {
  return /** @type {proto.aerium.TransactionInfo.PayloadCase} */(jspb.Message.computeOneofCase(this, proto.aerium.TransactionInfo.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.aerium.TransactionInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.aerium.TransactionInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.aerium.TransactionInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.aerium.TransactionInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
id: jspb.Message.getFieldWithDefault(msg, 1, ""),
data: jspb.Message.getFieldWithDefault(msg, 2, ""),
version: jspb.Message.getFieldWithDefault(msg, 3, 0),
lockTime: jspb.Message.getFieldWithDefault(msg, 4, 0),
value: jspb.Message.getFieldWithDefault(msg, 5, 0),
fee: jspb.Message.getFieldWithDefault(msg, 6, 0),
payloadType: jspb.Message.getFieldWithDefault(msg, 7, 0),
transfer: (f = msg.getTransfer()) && proto.aerium.PayloadTransfer.toObject(includeInstance, f),
bond: (f = msg.getBond()) && proto.aerium.PayloadBond.toObject(includeInstance, f),
sortition: (f = msg.getSortition()) && proto.aerium.PayloadSortition.toObject(includeInstance, f),
unbond: (f = msg.getUnbond()) && proto.aerium.PayloadUnbond.toObject(includeInstance, f),
withdraw: (f = msg.getWithdraw()) && proto.aerium.PayloadWithdraw.toObject(includeInstance, f),
batchTransfer: (f = msg.getBatchTransfer()) && proto.aerium.PayloadBatchTransfer.toObject(includeInstance, f),
memo: jspb.Message.getFieldWithDefault(msg, 8, ""),
publicKey: jspb.Message.getFieldWithDefault(msg, 9, ""),
signature: jspb.Message.getFieldWithDefault(msg, 10, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.aerium.TransactionInfo}
 */
proto.aerium.TransactionInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.aerium.TransactionInfo;
  return proto.aerium.TransactionInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.aerium.TransactionInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.aerium.TransactionInfo}
 */
proto.aerium.TransactionInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setData(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setVersion(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setLockTime(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setValue(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setFee(value);
      break;
    case 7:
      var value = /** @type {!proto.aerium.PayloadType} */ (reader.readEnum());
      msg.setPayloadType(value);
      break;
    case 30:
      var value = new proto.aerium.PayloadTransfer;
      reader.readMessage(value,proto.aerium.PayloadTransfer.deserializeBinaryFromReader);
      msg.setTransfer(value);
      break;
    case 31:
      var value = new proto.aerium.PayloadBond;
      reader.readMessage(value,proto.aerium.PayloadBond.deserializeBinaryFromReader);
      msg.setBond(value);
      break;
    case 32:
      var value = new proto.aerium.PayloadSortition;
      reader.readMessage(value,proto.aerium.PayloadSortition.deserializeBinaryFromReader);
      msg.setSortition(value);
      break;
    case 33:
      var value = new proto.aerium.PayloadUnbond;
      reader.readMessage(value,proto.aerium.PayloadUnbond.deserializeBinaryFromReader);
      msg.setUnbond(value);
      break;
    case 34:
      var value = new proto.aerium.PayloadWithdraw;
      reader.readMessage(value,proto.aerium.PayloadWithdraw.deserializeBinaryFromReader);
      msg.setWithdraw(value);
      break;
    case 35:
      var value = new proto.aerium.PayloadBatchTransfer;
      reader.readMessage(value,proto.aerium.PayloadBatchTransfer.deserializeBinaryFromReader);
      msg.setBatchTransfer(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setMemo(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setPublicKey(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setSignature(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.aerium.TransactionInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.aerium.TransactionInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.aerium.TransactionInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.aerium.TransactionInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getData();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getVersion();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getLockTime();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = message.getValue();
  if (f !== 0) {
    writer.writeInt64(
      5,
      f
    );
  }
  f = message.getFee();
  if (f !== 0) {
    writer.writeInt64(
      6,
      f
    );
  }
  f = message.getPayloadType();
  if (f !== 0.0) {
    writer.writeEnum(
      7,
      f
    );
  }
  f = message.getTransfer();
  if (f != null) {
    writer.writeMessage(
      30,
      f,
      proto.aerium.PayloadTransfer.serializeBinaryToWriter
    );
  }
  f = message.getBond();
  if (f != null) {
    writer.writeMessage(
      31,
      f,
      proto.aerium.PayloadBond.serializeBinaryToWriter
    );
  }
  f = message.getSortition();
  if (f != null) {
    writer.writeMessage(
      32,
      f,
      proto.aerium.PayloadSortition.serializeBinaryToWriter
    );
  }
  f = message.getUnbond();
  if (f != null) {
    writer.writeMessage(
      33,
      f,
      proto.aerium.PayloadUnbond.serializeBinaryToWriter
    );
  }
  f = message.getWithdraw();
  if (f != null) {
    writer.writeMessage(
      34,
      f,
      proto.aerium.PayloadWithdraw.serializeBinaryToWriter
    );
  }
  f = message.getBatchTransfer();
  if (f != null) {
    writer.writeMessage(
      35,
      f,
      proto.aerium.PayloadBatchTransfer.serializeBinaryToWriter
    );
  }
  f = message.getMemo();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getPublicKey();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getSignature();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.aerium.TransactionInfo.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.aerium.TransactionInfo} returns this
 */
proto.aerium.TransactionInfo.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string data = 2;
 * @return {string}
 */
proto.aerium.TransactionInfo.prototype.getData = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.aerium.TransactionInfo} returns this
 */
proto.aerium.TransactionInfo.prototype.setData = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int32 version = 3;
 * @return {number}
 */
proto.aerium.TransactionInfo.prototype.getVersion = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.aerium.TransactionInfo} returns this
 */
proto.aerium.TransactionInfo.prototype.setVersion = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint32 lock_time = 4;
 * @return {number}
 */
proto.aerium.TransactionInfo.prototype.getLockTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.aerium.TransactionInfo} returns this
 */
proto.aerium.TransactionInfo.prototype.setLockTime = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int64 value = 5;
 * @return {number}
 */
proto.aerium.TransactionInfo.prototype.getValue = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.aerium.TransactionInfo} returns this
 */
proto.aerium.TransactionInfo.prototype.setValue = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional int64 fee = 6;
 * @return {number}
 */
proto.aerium.TransactionInfo.prototype.getFee = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.aerium.TransactionInfo} returns this
 */
proto.aerium.TransactionInfo.prototype.setFee = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional PayloadType payload_type = 7;
 * @return {!proto.aerium.PayloadType}
 */
proto.aerium.TransactionInfo.prototype.getPayloadType = function() {
  return /** @type {!proto.aerium.PayloadType} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {!proto.aerium.PayloadType} value
 * @return {!proto.aerium.TransactionInfo} returns this
 */
proto.aerium.TransactionInfo.prototype.setPayloadType = function(value) {
  return jspb.Message.setProto3EnumField(this, 7, value);
};


/**
 * optional PayloadTransfer transfer = 30;
 * @return {?proto.aerium.PayloadTransfer}
 */
proto.aerium.TransactionInfo.prototype.getTransfer = function() {
  return /** @type{?proto.aerium.PayloadTransfer} */ (
    jspb.Message.getWrapperField(this, proto.aerium.PayloadTransfer, 30));
};


/**
 * @param {?proto.aerium.PayloadTransfer|undefined} value
 * @return {!proto.aerium.TransactionInfo} returns this
*/
proto.aerium.TransactionInfo.prototype.setTransfer = function(value) {
  return jspb.Message.setOneofWrapperField(this, 30, proto.aerium.TransactionInfo.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.aerium.TransactionInfo} returns this
 */
proto.aerium.TransactionInfo.prototype.clearTransfer = function() {
  return this.setTransfer(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.aerium.TransactionInfo.prototype.hasTransfer = function() {
  return jspb.Message.getField(this, 30) != null;
};


/**
 * optional PayloadBond bond = 31;
 * @return {?proto.aerium.PayloadBond}
 */
proto.aerium.TransactionInfo.prototype.getBond = function() {
  return /** @type{?proto.aerium.PayloadBond} */ (
    jspb.Message.getWrapperField(this, proto.aerium.PayloadBond, 31));
};


/**
 * @param {?proto.aerium.PayloadBond|undefined} value
 * @return {!proto.aerium.TransactionInfo} returns this
*/
proto.aerium.TransactionInfo.prototype.setBond = function(value) {
  return jspb.Message.setOneofWrapperField(this, 31, proto.aerium.TransactionInfo.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.aerium.TransactionInfo} returns this
 */
proto.aerium.TransactionInfo.prototype.clearBond = function() {
  return this.setBond(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.aerium.TransactionInfo.prototype.hasBond = function() {
  return jspb.Message.getField(this, 31) != null;
};


/**
 * optional PayloadSortition sortition = 32;
 * @return {?proto.aerium.PayloadSortition}
 */
proto.aerium.TransactionInfo.prototype.getSortition = function() {
  return /** @type{?proto.aerium.PayloadSortition} */ (
    jspb.Message.getWrapperField(this, proto.aerium.PayloadSortition, 32));
};


/**
 * @param {?proto.aerium.PayloadSortition|undefined} value
 * @return {!proto.aerium.TransactionInfo} returns this
*/
proto.aerium.TransactionInfo.prototype.setSortition = function(value) {
  return jspb.Message.setOneofWrapperField(this, 32, proto.aerium.TransactionInfo.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.aerium.TransactionInfo} returns this
 */
proto.aerium.TransactionInfo.prototype.clearSortition = function() {
  return this.setSortition(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.aerium.TransactionInfo.prototype.hasSortition = function() {
  return jspb.Message.getField(this, 32) != null;
};


/**
 * optional PayloadUnbond unbond = 33;
 * @return {?proto.aerium.PayloadUnbond}
 */
proto.aerium.TransactionInfo.prototype.getUnbond = function() {
  return /** @type{?proto.aerium.PayloadUnbond} */ (
    jspb.Message.getWrapperField(this, proto.aerium.PayloadUnbond, 33));
};


/**
 * @param {?proto.aerium.PayloadUnbond|undefined} value
 * @return {!proto.aerium.TransactionInfo} returns this
*/
proto.aerium.TransactionInfo.prototype.setUnbond = function(value) {
  return jspb.Message.setOneofWrapperField(this, 33, proto.aerium.TransactionInfo.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.aerium.TransactionInfo} returns this
 */
proto.aerium.TransactionInfo.prototype.clearUnbond = function() {
  return this.setUnbond(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.aerium.TransactionInfo.prototype.hasUnbond = function() {
  return jspb.Message.getField(this, 33) != null;
};


/**
 * optional PayloadWithdraw withdraw = 34;
 * @return {?proto.aerium.PayloadWithdraw}
 */
proto.aerium.TransactionInfo.prototype.getWithdraw = function() {
  return /** @type{?proto.aerium.PayloadWithdraw} */ (
    jspb.Message.getWrapperField(this, proto.aerium.PayloadWithdraw, 34));
};


/**
 * @param {?proto.aerium.PayloadWithdraw|undefined} value
 * @return {!proto.aerium.TransactionInfo} returns this
*/
proto.aerium.TransactionInfo.prototype.setWithdraw = function(value) {
  return jspb.Message.setOneofWrapperField(this, 34, proto.aerium.TransactionInfo.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.aerium.TransactionInfo} returns this
 */
proto.aerium.TransactionInfo.prototype.clearWithdraw = function() {
  return this.setWithdraw(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.aerium.TransactionInfo.prototype.hasWithdraw = function() {
  return jspb.Message.getField(this, 34) != null;
};


/**
 * optional PayloadBatchTransfer batch_transfer = 35;
 * @return {?proto.aerium.PayloadBatchTransfer}
 */
proto.aerium.TransactionInfo.prototype.getBatchTransfer = function() {
  return /** @type{?proto.aerium.PayloadBatchTransfer} */ (
    jspb.Message.getWrapperField(this, proto.aerium.PayloadBatchTransfer, 35));
};


/**
 * @param {?proto.aerium.PayloadBatchTransfer|undefined} value
 * @return {!proto.aerium.TransactionInfo} returns this
*/
proto.aerium.TransactionInfo.prototype.setBatchTransfer = function(value) {
  return jspb.Message.setOneofWrapperField(this, 35, proto.aerium.TransactionInfo.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.aerium.TransactionInfo} returns this
 */
proto.aerium.TransactionInfo.prototype.clearBatchTransfer = function() {
  return this.setBatchTransfer(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.aerium.TransactionInfo.prototype.hasBatchTransfer = function() {
  return jspb.Message.getField(this, 35) != null;
};


/**
 * optional string memo = 8;
 * @return {string}
 */
proto.aerium.TransactionInfo.prototype.getMemo = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.aerium.TransactionInfo} returns this
 */
proto.aerium.TransactionInfo.prototype.setMemo = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional string public_key = 9;
 * @return {string}
 */
proto.aerium.TransactionInfo.prototype.getPublicKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.aerium.TransactionInfo} returns this
 */
proto.aerium.TransactionInfo.prototype.setPublicKey = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional string signature = 10;
 * @return {string}
 */
proto.aerium.TransactionInfo.prototype.getSignature = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * @param {string} value
 * @return {!proto.aerium.TransactionInfo} returns this
 */
proto.aerium.TransactionInfo.prototype.setSignature = function(value) {
  return jspb.Message.setProto3StringField(this, 10, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.aerium.DecodeRawTransactionRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.aerium.DecodeRawTransactionRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.aerium.DecodeRawTransactionRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.aerium.DecodeRawTransactionRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
rawTransaction: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.aerium.DecodeRawTransactionRequest}
 */
proto.aerium.DecodeRawTransactionRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.aerium.DecodeRawTransactionRequest;
  return proto.aerium.DecodeRawTransactionRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.aerium.DecodeRawTransactionRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.aerium.DecodeRawTransactionRequest}
 */
proto.aerium.DecodeRawTransactionRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRawTransaction(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.aerium.DecodeRawTransactionRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.aerium.DecodeRawTransactionRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.aerium.DecodeRawTransactionRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.aerium.DecodeRawTransactionRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRawTransaction();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string raw_transaction = 1;
 * @return {string}
 */
proto.aerium.DecodeRawTransactionRequest.prototype.getRawTransaction = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.aerium.DecodeRawTransactionRequest} returns this
 */
proto.aerium.DecodeRawTransactionRequest.prototype.setRawTransaction = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.aerium.DecodeRawTransactionResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.aerium.DecodeRawTransactionResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.aerium.DecodeRawTransactionResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.aerium.DecodeRawTransactionResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
transaction: (f = msg.getTransaction()) && proto.aerium.TransactionInfo.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.aerium.DecodeRawTransactionResponse}
 */
proto.aerium.DecodeRawTransactionResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.aerium.DecodeRawTransactionResponse;
  return proto.aerium.DecodeRawTransactionResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.aerium.DecodeRawTransactionResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.aerium.DecodeRawTransactionResponse}
 */
proto.aerium.DecodeRawTransactionResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.aerium.TransactionInfo;
      reader.readMessage(value,proto.aerium.TransactionInfo.deserializeBinaryFromReader);
      msg.setTransaction(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.aerium.DecodeRawTransactionResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.aerium.DecodeRawTransactionResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.aerium.DecodeRawTransactionResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.aerium.DecodeRawTransactionResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTransaction();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.aerium.TransactionInfo.serializeBinaryToWriter
    );
  }
};


/**
 * optional TransactionInfo transaction = 1;
 * @return {?proto.aerium.TransactionInfo}
 */
proto.aerium.DecodeRawTransactionResponse.prototype.getTransaction = function() {
  return /** @type{?proto.aerium.TransactionInfo} */ (
    jspb.Message.getWrapperField(this, proto.aerium.TransactionInfo, 1));
};


/**
 * @param {?proto.aerium.TransactionInfo|undefined} value
 * @return {!proto.aerium.DecodeRawTransactionResponse} returns this
*/
proto.aerium.DecodeRawTransactionResponse.prototype.setTransaction = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.aerium.DecodeRawTransactionResponse} returns this
 */
proto.aerium.DecodeRawTransactionResponse.prototype.clearTransaction = function() {
  return this.setTransaction(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.aerium.DecodeRawTransactionResponse.prototype.hasTransaction = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * @enum {number}
 */
proto.aerium.PayloadType = {
  PAYLOAD_TYPE_UNSPECIFIED: 0,
  PAYLOAD_TYPE_TRANSFER: 1,
  PAYLOAD_TYPE_BOND: 2,
  PAYLOAD_TYPE_SORTITION: 3,
  PAYLOAD_TYPE_UNBOND: 4,
  PAYLOAD_TYPE_WITHDRAW: 5,
  PAYLOAD_TYPE_BATCH_TRANSFER: 6
};

/**
 * @enum {number}
 */
proto.aerium.TransactionVerbosity = {
  TRANSACTION_VERBOSITY_DATA: 0,
  TRANSACTION_VERBOSITY_INFO: 1
};

goog.object.extend(exports, proto.aerium);

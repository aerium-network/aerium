/**
 * @fileoverview gRPC-Web generated client stub for aerium
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.5.0
// 	protoc              v0.0.0
// source: blockchain.proto


/* eslint-disable */
// @ts-nocheck



const grpc = {};
grpc.web = require('grpc-web');


var transaction_pb = require('./transaction_pb.js')
const proto = {};
proto.aerium = require('./blockchain_pb.js');

/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.aerium.BlockchainClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'binary';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.aerium.BlockchainPromiseClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'binary';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.aerium.GetBlockRequest,
 *   !proto.aerium.GetBlockResponse>}
 */
const methodDescriptor_Blockchain_GetBlock = new grpc.web.MethodDescriptor(
  '/aerium.Blockchain/GetBlock',
  grpc.web.MethodType.UNARY,
  proto.aerium.GetBlockRequest,
  proto.aerium.GetBlockResponse,
  /**
   * @param {!proto.aerium.GetBlockRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.aerium.GetBlockResponse.deserializeBinary
);


/**
 * @param {!proto.aerium.GetBlockRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.aerium.GetBlockResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.aerium.GetBlockResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.aerium.BlockchainClient.prototype.getBlock =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/aerium.Blockchain/GetBlock',
      request,
      metadata || {},
      methodDescriptor_Blockchain_GetBlock,
      callback);
};


/**
 * @param {!proto.aerium.GetBlockRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.aerium.GetBlockResponse>}
 *     Promise that resolves to the response
 */
proto.aerium.BlockchainPromiseClient.prototype.getBlock =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/aerium.Blockchain/GetBlock',
      request,
      metadata || {},
      methodDescriptor_Blockchain_GetBlock);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.aerium.GetBlockHashRequest,
 *   !proto.aerium.GetBlockHashResponse>}
 */
const methodDescriptor_Blockchain_GetBlockHash = new grpc.web.MethodDescriptor(
  '/aerium.Blockchain/GetBlockHash',
  grpc.web.MethodType.UNARY,
  proto.aerium.GetBlockHashRequest,
  proto.aerium.GetBlockHashResponse,
  /**
   * @param {!proto.aerium.GetBlockHashRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.aerium.GetBlockHashResponse.deserializeBinary
);


/**
 * @param {!proto.aerium.GetBlockHashRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.aerium.GetBlockHashResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.aerium.GetBlockHashResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.aerium.BlockchainClient.prototype.getBlockHash =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/aerium.Blockchain/GetBlockHash',
      request,
      metadata || {},
      methodDescriptor_Blockchain_GetBlockHash,
      callback);
};


/**
 * @param {!proto.aerium.GetBlockHashRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.aerium.GetBlockHashResponse>}
 *     Promise that resolves to the response
 */
proto.aerium.BlockchainPromiseClient.prototype.getBlockHash =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/aerium.Blockchain/GetBlockHash',
      request,
      metadata || {},
      methodDescriptor_Blockchain_GetBlockHash);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.aerium.GetBlockHeightRequest,
 *   !proto.aerium.GetBlockHeightResponse>}
 */
const methodDescriptor_Blockchain_GetBlockHeight = new grpc.web.MethodDescriptor(
  '/aerium.Blockchain/GetBlockHeight',
  grpc.web.MethodType.UNARY,
  proto.aerium.GetBlockHeightRequest,
  proto.aerium.GetBlockHeightResponse,
  /**
   * @param {!proto.aerium.GetBlockHeightRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.aerium.GetBlockHeightResponse.deserializeBinary
);


/**
 * @param {!proto.aerium.GetBlockHeightRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.aerium.GetBlockHeightResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.aerium.GetBlockHeightResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.aerium.BlockchainClient.prototype.getBlockHeight =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/aerium.Blockchain/GetBlockHeight',
      request,
      metadata || {},
      methodDescriptor_Blockchain_GetBlockHeight,
      callback);
};


/**
 * @param {!proto.aerium.GetBlockHeightRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.aerium.GetBlockHeightResponse>}
 *     Promise that resolves to the response
 */
proto.aerium.BlockchainPromiseClient.prototype.getBlockHeight =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/aerium.Blockchain/GetBlockHeight',
      request,
      metadata || {},
      methodDescriptor_Blockchain_GetBlockHeight);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.aerium.GetBlockchainInfoRequest,
 *   !proto.aerium.GetBlockchainInfoResponse>}
 */
const methodDescriptor_Blockchain_GetBlockchainInfo = new grpc.web.MethodDescriptor(
  '/aerium.Blockchain/GetBlockchainInfo',
  grpc.web.MethodType.UNARY,
  proto.aerium.GetBlockchainInfoRequest,
  proto.aerium.GetBlockchainInfoResponse,
  /**
   * @param {!proto.aerium.GetBlockchainInfoRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.aerium.GetBlockchainInfoResponse.deserializeBinary
);


/**
 * @param {!proto.aerium.GetBlockchainInfoRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.aerium.GetBlockchainInfoResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.aerium.GetBlockchainInfoResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.aerium.BlockchainClient.prototype.getBlockchainInfo =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/aerium.Blockchain/GetBlockchainInfo',
      request,
      metadata || {},
      methodDescriptor_Blockchain_GetBlockchainInfo,
      callback);
};


/**
 * @param {!proto.aerium.GetBlockchainInfoRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.aerium.GetBlockchainInfoResponse>}
 *     Promise that resolves to the response
 */
proto.aerium.BlockchainPromiseClient.prototype.getBlockchainInfo =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/aerium.Blockchain/GetBlockchainInfo',
      request,
      metadata || {},
      methodDescriptor_Blockchain_GetBlockchainInfo);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.aerium.GetConsensusInfoRequest,
 *   !proto.aerium.GetConsensusInfoResponse>}
 */
const methodDescriptor_Blockchain_GetConsensusInfo = new grpc.web.MethodDescriptor(
  '/aerium.Blockchain/GetConsensusInfo',
  grpc.web.MethodType.UNARY,
  proto.aerium.GetConsensusInfoRequest,
  proto.aerium.GetConsensusInfoResponse,
  /**
   * @param {!proto.aerium.GetConsensusInfoRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.aerium.GetConsensusInfoResponse.deserializeBinary
);


/**
 * @param {!proto.aerium.GetConsensusInfoRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.aerium.GetConsensusInfoResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.aerium.GetConsensusInfoResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.aerium.BlockchainClient.prototype.getConsensusInfo =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/aerium.Blockchain/GetConsensusInfo',
      request,
      metadata || {},
      methodDescriptor_Blockchain_GetConsensusInfo,
      callback);
};


/**
 * @param {!proto.aerium.GetConsensusInfoRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.aerium.GetConsensusInfoResponse>}
 *     Promise that resolves to the response
 */
proto.aerium.BlockchainPromiseClient.prototype.getConsensusInfo =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/aerium.Blockchain/GetConsensusInfo',
      request,
      metadata || {},
      methodDescriptor_Blockchain_GetConsensusInfo);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.aerium.GetAccountRequest,
 *   !proto.aerium.GetAccountResponse>}
 */
const methodDescriptor_Blockchain_GetAccount = new grpc.web.MethodDescriptor(
  '/aerium.Blockchain/GetAccount',
  grpc.web.MethodType.UNARY,
  proto.aerium.GetAccountRequest,
  proto.aerium.GetAccountResponse,
  /**
   * @param {!proto.aerium.GetAccountRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.aerium.GetAccountResponse.deserializeBinary
);


/**
 * @param {!proto.aerium.GetAccountRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.aerium.GetAccountResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.aerium.GetAccountResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.aerium.BlockchainClient.prototype.getAccount =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/aerium.Blockchain/GetAccount',
      request,
      metadata || {},
      methodDescriptor_Blockchain_GetAccount,
      callback);
};


/**
 * @param {!proto.aerium.GetAccountRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.aerium.GetAccountResponse>}
 *     Promise that resolves to the response
 */
proto.aerium.BlockchainPromiseClient.prototype.getAccount =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/aerium.Blockchain/GetAccount',
      request,
      metadata || {},
      methodDescriptor_Blockchain_GetAccount);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.aerium.GetValidatorRequest,
 *   !proto.aerium.GetValidatorResponse>}
 */
const methodDescriptor_Blockchain_GetValidator = new grpc.web.MethodDescriptor(
  '/aerium.Blockchain/GetValidator',
  grpc.web.MethodType.UNARY,
  proto.aerium.GetValidatorRequest,
  proto.aerium.GetValidatorResponse,
  /**
   * @param {!proto.aerium.GetValidatorRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.aerium.GetValidatorResponse.deserializeBinary
);


/**
 * @param {!proto.aerium.GetValidatorRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.aerium.GetValidatorResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.aerium.GetValidatorResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.aerium.BlockchainClient.prototype.getValidator =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/aerium.Blockchain/GetValidator',
      request,
      metadata || {},
      methodDescriptor_Blockchain_GetValidator,
      callback);
};


/**
 * @param {!proto.aerium.GetValidatorRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.aerium.GetValidatorResponse>}
 *     Promise that resolves to the response
 */
proto.aerium.BlockchainPromiseClient.prototype.getValidator =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/aerium.Blockchain/GetValidator',
      request,
      metadata || {},
      methodDescriptor_Blockchain_GetValidator);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.aerium.GetValidatorByNumberRequest,
 *   !proto.aerium.GetValidatorResponse>}
 */
const methodDescriptor_Blockchain_GetValidatorByNumber = new grpc.web.MethodDescriptor(
  '/aerium.Blockchain/GetValidatorByNumber',
  grpc.web.MethodType.UNARY,
  proto.aerium.GetValidatorByNumberRequest,
  proto.aerium.GetValidatorResponse,
  /**
   * @param {!proto.aerium.GetValidatorByNumberRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.aerium.GetValidatorResponse.deserializeBinary
);


/**
 * @param {!proto.aerium.GetValidatorByNumberRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.aerium.GetValidatorResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.aerium.GetValidatorResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.aerium.BlockchainClient.prototype.getValidatorByNumber =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/aerium.Blockchain/GetValidatorByNumber',
      request,
      metadata || {},
      methodDescriptor_Blockchain_GetValidatorByNumber,
      callback);
};


/**
 * @param {!proto.aerium.GetValidatorByNumberRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.aerium.GetValidatorResponse>}
 *     Promise that resolves to the response
 */
proto.aerium.BlockchainPromiseClient.prototype.getValidatorByNumber =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/aerium.Blockchain/GetValidatorByNumber',
      request,
      metadata || {},
      methodDescriptor_Blockchain_GetValidatorByNumber);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.aerium.GetValidatorAddressesRequest,
 *   !proto.aerium.GetValidatorAddressesResponse>}
 */
const methodDescriptor_Blockchain_GetValidatorAddresses = new grpc.web.MethodDescriptor(
  '/aerium.Blockchain/GetValidatorAddresses',
  grpc.web.MethodType.UNARY,
  proto.aerium.GetValidatorAddressesRequest,
  proto.aerium.GetValidatorAddressesResponse,
  /**
   * @param {!proto.aerium.GetValidatorAddressesRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.aerium.GetValidatorAddressesResponse.deserializeBinary
);


/**
 * @param {!proto.aerium.GetValidatorAddressesRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.aerium.GetValidatorAddressesResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.aerium.GetValidatorAddressesResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.aerium.BlockchainClient.prototype.getValidatorAddresses =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/aerium.Blockchain/GetValidatorAddresses',
      request,
      metadata || {},
      methodDescriptor_Blockchain_GetValidatorAddresses,
      callback);
};


/**
 * @param {!proto.aerium.GetValidatorAddressesRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.aerium.GetValidatorAddressesResponse>}
 *     Promise that resolves to the response
 */
proto.aerium.BlockchainPromiseClient.prototype.getValidatorAddresses =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/aerium.Blockchain/GetValidatorAddresses',
      request,
      metadata || {},
      methodDescriptor_Blockchain_GetValidatorAddresses);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.aerium.GetPublicKeyRequest,
 *   !proto.aerium.GetPublicKeyResponse>}
 */
const methodDescriptor_Blockchain_GetPublicKey = new grpc.web.MethodDescriptor(
  '/aerium.Blockchain/GetPublicKey',
  grpc.web.MethodType.UNARY,
  proto.aerium.GetPublicKeyRequest,
  proto.aerium.GetPublicKeyResponse,
  /**
   * @param {!proto.aerium.GetPublicKeyRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.aerium.GetPublicKeyResponse.deserializeBinary
);


/**
 * @param {!proto.aerium.GetPublicKeyRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.aerium.GetPublicKeyResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.aerium.GetPublicKeyResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.aerium.BlockchainClient.prototype.getPublicKey =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/aerium.Blockchain/GetPublicKey',
      request,
      metadata || {},
      methodDescriptor_Blockchain_GetPublicKey,
      callback);
};


/**
 * @param {!proto.aerium.GetPublicKeyRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.aerium.GetPublicKeyResponse>}
 *     Promise that resolves to the response
 */
proto.aerium.BlockchainPromiseClient.prototype.getPublicKey =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/aerium.Blockchain/GetPublicKey',
      request,
      metadata || {},
      methodDescriptor_Blockchain_GetPublicKey);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.aerium.GetTxPoolContentRequest,
 *   !proto.aerium.GetTxPoolContentResponse>}
 */
const methodDescriptor_Blockchain_GetTxPoolContent = new grpc.web.MethodDescriptor(
  '/aerium.Blockchain/GetTxPoolContent',
  grpc.web.MethodType.UNARY,
  proto.aerium.GetTxPoolContentRequest,
  proto.aerium.GetTxPoolContentResponse,
  /**
   * @param {!proto.aerium.GetTxPoolContentRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.aerium.GetTxPoolContentResponse.deserializeBinary
);


/**
 * @param {!proto.aerium.GetTxPoolContentRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.aerium.GetTxPoolContentResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.aerium.GetTxPoolContentResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.aerium.BlockchainClient.prototype.getTxPoolContent =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/aerium.Blockchain/GetTxPoolContent',
      request,
      metadata || {},
      methodDescriptor_Blockchain_GetTxPoolContent,
      callback);
};


/**
 * @param {!proto.aerium.GetTxPoolContentRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.aerium.GetTxPoolContentResponse>}
 *     Promise that resolves to the response
 */
proto.aerium.BlockchainPromiseClient.prototype.getTxPoolContent =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/aerium.Blockchain/GetTxPoolContent',
      request,
      metadata || {},
      methodDescriptor_Blockchain_GetTxPoolContent);
};


module.exports = proto.aerium;


/**
 * @fileoverview gRPC-Web generated client stub for aerium
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.5.0
// 	protoc              v0.0.0
// source: transaction.proto


/* eslint-disable */
// @ts-nocheck



const grpc = {};
grpc.web = require('grpc-web');

const proto = {};
proto.aerium = require('./transaction_pb.js');

/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.aerium.TransactionClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'binary';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.aerium.TransactionPromiseClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'binary';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.aerium.GetTransactionRequest,
 *   !proto.aerium.GetTransactionResponse>}
 */
const methodDescriptor_Transaction_GetTransaction = new grpc.web.MethodDescriptor(
  '/aerium.Transaction/GetTransaction',
  grpc.web.MethodType.UNARY,
  proto.aerium.GetTransactionRequest,
  proto.aerium.GetTransactionResponse,
  /**
   * @param {!proto.aerium.GetTransactionRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.aerium.GetTransactionResponse.deserializeBinary
);


/**
 * @param {!proto.aerium.GetTransactionRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.aerium.GetTransactionResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.aerium.GetTransactionResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.aerium.TransactionClient.prototype.getTransaction =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/aerium.Transaction/GetTransaction',
      request,
      metadata || {},
      methodDescriptor_Transaction_GetTransaction,
      callback);
};


/**
 * @param {!proto.aerium.GetTransactionRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.aerium.GetTransactionResponse>}
 *     Promise that resolves to the response
 */
proto.aerium.TransactionPromiseClient.prototype.getTransaction =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/aerium.Transaction/GetTransaction',
      request,
      metadata || {},
      methodDescriptor_Transaction_GetTransaction);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.aerium.CalculateFeeRequest,
 *   !proto.aerium.CalculateFeeResponse>}
 */
const methodDescriptor_Transaction_CalculateFee = new grpc.web.MethodDescriptor(
  '/aerium.Transaction/CalculateFee',
  grpc.web.MethodType.UNARY,
  proto.aerium.CalculateFeeRequest,
  proto.aerium.CalculateFeeResponse,
  /**
   * @param {!proto.aerium.CalculateFeeRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.aerium.CalculateFeeResponse.deserializeBinary
);


/**
 * @param {!proto.aerium.CalculateFeeRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.aerium.CalculateFeeResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.aerium.CalculateFeeResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.aerium.TransactionClient.prototype.calculateFee =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/aerium.Transaction/CalculateFee',
      request,
      metadata || {},
      methodDescriptor_Transaction_CalculateFee,
      callback);
};


/**
 * @param {!proto.aerium.CalculateFeeRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.aerium.CalculateFeeResponse>}
 *     Promise that resolves to the response
 */
proto.aerium.TransactionPromiseClient.prototype.calculateFee =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/aerium.Transaction/CalculateFee',
      request,
      metadata || {},
      methodDescriptor_Transaction_CalculateFee);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.aerium.BroadcastTransactionRequest,
 *   !proto.aerium.BroadcastTransactionResponse>}
 */
const methodDescriptor_Transaction_BroadcastTransaction = new grpc.web.MethodDescriptor(
  '/aerium.Transaction/BroadcastTransaction',
  grpc.web.MethodType.UNARY,
  proto.aerium.BroadcastTransactionRequest,
  proto.aerium.BroadcastTransactionResponse,
  /**
   * @param {!proto.aerium.BroadcastTransactionRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.aerium.BroadcastTransactionResponse.deserializeBinary
);


/**
 * @param {!proto.aerium.BroadcastTransactionRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.aerium.BroadcastTransactionResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.aerium.BroadcastTransactionResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.aerium.TransactionClient.prototype.broadcastTransaction =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/aerium.Transaction/BroadcastTransaction',
      request,
      metadata || {},
      methodDescriptor_Transaction_BroadcastTransaction,
      callback);
};


/**
 * @param {!proto.aerium.BroadcastTransactionRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.aerium.BroadcastTransactionResponse>}
 *     Promise that resolves to the response
 */
proto.aerium.TransactionPromiseClient.prototype.broadcastTransaction =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/aerium.Transaction/BroadcastTransaction',
      request,
      metadata || {},
      methodDescriptor_Transaction_BroadcastTransaction);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.aerium.GetRawTransferTransactionRequest,
 *   !proto.aerium.GetRawTransactionResponse>}
 */
const methodDescriptor_Transaction_GetRawTransferTransaction = new grpc.web.MethodDescriptor(
  '/aerium.Transaction/GetRawTransferTransaction',
  grpc.web.MethodType.UNARY,
  proto.aerium.GetRawTransferTransactionRequest,
  proto.aerium.GetRawTransactionResponse,
  /**
   * @param {!proto.aerium.GetRawTransferTransactionRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.aerium.GetRawTransactionResponse.deserializeBinary
);


/**
 * @param {!proto.aerium.GetRawTransferTransactionRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.aerium.GetRawTransactionResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.aerium.GetRawTransactionResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.aerium.TransactionClient.prototype.getRawTransferTransaction =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/aerium.Transaction/GetRawTransferTransaction',
      request,
      metadata || {},
      methodDescriptor_Transaction_GetRawTransferTransaction,
      callback);
};


/**
 * @param {!proto.aerium.GetRawTransferTransactionRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.aerium.GetRawTransactionResponse>}
 *     Promise that resolves to the response
 */
proto.aerium.TransactionPromiseClient.prototype.getRawTransferTransaction =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/aerium.Transaction/GetRawTransferTransaction',
      request,
      metadata || {},
      methodDescriptor_Transaction_GetRawTransferTransaction);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.aerium.GetRawBondTransactionRequest,
 *   !proto.aerium.GetRawTransactionResponse>}
 */
const methodDescriptor_Transaction_GetRawBondTransaction = new grpc.web.MethodDescriptor(
  '/aerium.Transaction/GetRawBondTransaction',
  grpc.web.MethodType.UNARY,
  proto.aerium.GetRawBondTransactionRequest,
  proto.aerium.GetRawTransactionResponse,
  /**
   * @param {!proto.aerium.GetRawBondTransactionRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.aerium.GetRawTransactionResponse.deserializeBinary
);


/**
 * @param {!proto.aerium.GetRawBondTransactionRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.aerium.GetRawTransactionResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.aerium.GetRawTransactionResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.aerium.TransactionClient.prototype.getRawBondTransaction =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/aerium.Transaction/GetRawBondTransaction',
      request,
      metadata || {},
      methodDescriptor_Transaction_GetRawBondTransaction,
      callback);
};


/**
 * @param {!proto.aerium.GetRawBondTransactionRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.aerium.GetRawTransactionResponse>}
 *     Promise that resolves to the response
 */
proto.aerium.TransactionPromiseClient.prototype.getRawBondTransaction =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/aerium.Transaction/GetRawBondTransaction',
      request,
      metadata || {},
      methodDescriptor_Transaction_GetRawBondTransaction);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.aerium.GetRawUnbondTransactionRequest,
 *   !proto.aerium.GetRawTransactionResponse>}
 */
const methodDescriptor_Transaction_GetRawUnbondTransaction = new grpc.web.MethodDescriptor(
  '/aerium.Transaction/GetRawUnbondTransaction',
  grpc.web.MethodType.UNARY,
  proto.aerium.GetRawUnbondTransactionRequest,
  proto.aerium.GetRawTransactionResponse,
  /**
   * @param {!proto.aerium.GetRawUnbondTransactionRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.aerium.GetRawTransactionResponse.deserializeBinary
);


/**
 * @param {!proto.aerium.GetRawUnbondTransactionRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.aerium.GetRawTransactionResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.aerium.GetRawTransactionResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.aerium.TransactionClient.prototype.getRawUnbondTransaction =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/aerium.Transaction/GetRawUnbondTransaction',
      request,
      metadata || {},
      methodDescriptor_Transaction_GetRawUnbondTransaction,
      callback);
};


/**
 * @param {!proto.aerium.GetRawUnbondTransactionRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.aerium.GetRawTransactionResponse>}
 *     Promise that resolves to the response
 */
proto.aerium.TransactionPromiseClient.prototype.getRawUnbondTransaction =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/aerium.Transaction/GetRawUnbondTransaction',
      request,
      metadata || {},
      methodDescriptor_Transaction_GetRawUnbondTransaction);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.aerium.GetRawWithdrawTransactionRequest,
 *   !proto.aerium.GetRawTransactionResponse>}
 */
const methodDescriptor_Transaction_GetRawWithdrawTransaction = new grpc.web.MethodDescriptor(
  '/aerium.Transaction/GetRawWithdrawTransaction',
  grpc.web.MethodType.UNARY,
  proto.aerium.GetRawWithdrawTransactionRequest,
  proto.aerium.GetRawTransactionResponse,
  /**
   * @param {!proto.aerium.GetRawWithdrawTransactionRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.aerium.GetRawTransactionResponse.deserializeBinary
);


/**
 * @param {!proto.aerium.GetRawWithdrawTransactionRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.aerium.GetRawTransactionResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.aerium.GetRawTransactionResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.aerium.TransactionClient.prototype.getRawWithdrawTransaction =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/aerium.Transaction/GetRawWithdrawTransaction',
      request,
      metadata || {},
      methodDescriptor_Transaction_GetRawWithdrawTransaction,
      callback);
};


/**
 * @param {!proto.aerium.GetRawWithdrawTransactionRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.aerium.GetRawTransactionResponse>}
 *     Promise that resolves to the response
 */
proto.aerium.TransactionPromiseClient.prototype.getRawWithdrawTransaction =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/aerium.Transaction/GetRawWithdrawTransaction',
      request,
      metadata || {},
      methodDescriptor_Transaction_GetRawWithdrawTransaction);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.aerium.GetRawBatchTransferTransactionRequest,
 *   !proto.aerium.GetRawTransactionResponse>}
 */
const methodDescriptor_Transaction_GetRawBatchTransferTransaction = new grpc.web.MethodDescriptor(
  '/aerium.Transaction/GetRawBatchTransferTransaction',
  grpc.web.MethodType.UNARY,
  proto.aerium.GetRawBatchTransferTransactionRequest,
  proto.aerium.GetRawTransactionResponse,
  /**
   * @param {!proto.aerium.GetRawBatchTransferTransactionRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.aerium.GetRawTransactionResponse.deserializeBinary
);


/**
 * @param {!proto.aerium.GetRawBatchTransferTransactionRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.aerium.GetRawTransactionResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.aerium.GetRawTransactionResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.aerium.TransactionClient.prototype.getRawBatchTransferTransaction =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/aerium.Transaction/GetRawBatchTransferTransaction',
      request,
      metadata || {},
      methodDescriptor_Transaction_GetRawBatchTransferTransaction,
      callback);
};


/**
 * @param {!proto.aerium.GetRawBatchTransferTransactionRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.aerium.GetRawTransactionResponse>}
 *     Promise that resolves to the response
 */
proto.aerium.TransactionPromiseClient.prototype.getRawBatchTransferTransaction =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/aerium.Transaction/GetRawBatchTransferTransaction',
      request,
      metadata || {},
      methodDescriptor_Transaction_GetRawBatchTransferTransaction);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.aerium.DecodeRawTransactionRequest,
 *   !proto.aerium.DecodeRawTransactionResponse>}
 */
const methodDescriptor_Transaction_DecodeRawTransaction = new grpc.web.MethodDescriptor(
  '/aerium.Transaction/DecodeRawTransaction',
  grpc.web.MethodType.UNARY,
  proto.aerium.DecodeRawTransactionRequest,
  proto.aerium.DecodeRawTransactionResponse,
  /**
   * @param {!proto.aerium.DecodeRawTransactionRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.aerium.DecodeRawTransactionResponse.deserializeBinary
);


/**
 * @param {!proto.aerium.DecodeRawTransactionRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.aerium.DecodeRawTransactionResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.aerium.DecodeRawTransactionResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.aerium.TransactionClient.prototype.decodeRawTransaction =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/aerium.Transaction/DecodeRawTransaction',
      request,
      metadata || {},
      methodDescriptor_Transaction_DecodeRawTransaction,
      callback);
};


/**
 * @param {!proto.aerium.DecodeRawTransactionRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.aerium.DecodeRawTransactionResponse>}
 *     Promise that resolves to the response
 */
proto.aerium.TransactionPromiseClient.prototype.decodeRawTransaction =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/aerium.Transaction/DecodeRawTransaction',
      request,
      metadata || {},
      methodDescriptor_Transaction_DecodeRawTransaction);
};


module.exports = proto.aerium;

